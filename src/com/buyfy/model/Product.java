// model package 
package com.buyfy.model;

//Import Files Used In this Program
import java.io.Serializable;
import java.util.*;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/*
 * Products Entity
 * This will use to store vendor product details
 */
@Entity
@Table(name = "products")
public class Product implements Serializable 
{
	// serial version uid
	private static final long serialVersionUID = -891867051693553948L;

	/* **** Product Attributes ***** */
	/* Product Primary Key (PRODUCT_ID)
	 * Product Id will be Generated by Sequence Strategy  PRODUCT_SQE_GEN
	 * */
	@Id
	@Column(name = "product_id")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "PRODUCT_SEQ_GEN")
	@SequenceGenerator(name = "PRODUCT_SEQ_GEN", allocationSize = 1, sequenceName = "PRODUCT_SEQ_GEN")
	private long id;

	//variable for product vendor
	@OneToOne(fetch = FetchType.EAGER)
	@JoinTable(name = "Product_Vendor")
	private User vendor;

	//variable for product reviews
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinColumn(name = "REVIEWS")
	private Set<ProductReview> reviews; // initialized product review(what buyer think about product)

	//variable for product category
	@ManyToOne(fetch=FetchType.EAGER)
	@JoinTable(name = "product_category")
	private Category category;

	//variable for product sub category
	@Column(name="Product_Subcategory")
	private String subCategory;
	
	//variable for product image
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinTable(name = "product_images")
	private Set<Image> images = new HashSet<>(); // initialized product image to desc. product easily

	//variable for product name
	@Column(name = "Product_Name")
	private String name;
	
	//variable for product created date
	@Column(name = "Product_Created_Date")
	@Temporal(TemporalType.DATE)
	private Date publishDate;

	//variable for product description
	@Column(name = "Product_Description")
	private String description;

	//variable for product price
	@Column(name = "Price")
	private double price; // initialized product price in market

	//variable for product discounted price
	@Column(name = "Discounted_Price")
	private double discountedPrice;
	
	//variable for product available status
	@Column(name = "Product_Available")
	private boolean productAvailable;
	
	//variable for product ranking
	@Column(name = "Ranking")
	private float ranking; // initialized product rating on site

	// No Argument Product Constructor
	public Product() {
		productAvailable = true;
		ranking = 1.0f;
	}

	// Parameterized Product Constructor
	public Product(User vendor, Set<ProductReview> reviews, Category category, Set<Image> images, String name,
			Date publishDate, String description, double price, boolean productAvailable, float ranking) {
		super();
		this.vendor = vendor;
		this.reviews = reviews;
		this.category = category;
		this.images = images;
		this.name = name;
		this.publishDate = publishDate;
		this.description = description;
		this.price = price;
		this.productAvailable = productAvailable;
		this.ranking = ranking;
	}

	/*
	 * Product Getters and Setters 
	 */
	// getter for id
	public long getId() {
		return id;
	}

	// setter for id
	public void setId(long id) {
		this.id = id;
	}

	//getter for vendor
	public User getVendor() {
		return vendor;
	}

	//setter for vendor
	public void setVendor(User vendor) {
		this.vendor = vendor;
	}
	
	//getter for product sub category
	public String getSubCategory() {
		return subCategory;
	}

	//setter for product sub category
	public void setSubCategory(String subCategory) {
		this.subCategory = subCategory;
	}

	//getter for product discount price
	public double getDiscountedPrice() {
		return discountedPrice;
	}

	//setter for product discount price
	public void setDiscountedPrice(double discountedPrice) {
		this.discountedPrice = discountedPrice;
	}

	//getter for product reviews
	public Set<ProductReview> getReviews() {
		return reviews;
	}

	//setter for product reviews
	public void setReviews(Set<ProductReview> reviews) {
		this.reviews = reviews;
	}

	//getter for product name
	public String getName() {
		return name;
	}

	//setter for product name
	public void setName(String name) {
		this.name = name;
	}

	//getter for product publish date
	public Date getPublishDate() {
		return publishDate;
	}

	//setter for product publish date
	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}

	//getter for product description
	public String getDescription() {
		return description;
	}

	//getter for product ranking
	public void setDescription(String description) {
		this.description = description;
	}

	//setter for product ranking
	public void setRanking(float ranking) {
		this.ranking = ranking;
	}

	//getter for product category
	public Category getCategory() {
		return category;
	}

	//setter for product category
	public void setCategory(Category category) {
		this.category = category;
	}

	//getter for product price
	public double getPrice() {
		return price;
	}

	//setter for product price
	public void setPrice(double price) {
		this.price = price;
	}

	//getter for product available status
	public boolean isProductAvailable() {
		return productAvailable;
	}

	//setter for product available status
	public void setProductAvailable(boolean productAvailable) {
		this.productAvailable = productAvailable;
	}

	//getter for product image
	public Set<Image> getImages() {
		return images;
	}

	//setter for product image
	public void setImages(Set<Image> images) {
		this.images = images;
	}

	//getter for ranking
	public Float getRanking() {
		return ranking;
	}

	//setter for ranking
	public void setRanking(Float ranking) {
		this.ranking = ranking;
	}

	/*
	 * Overriding toString for Product
	 */
	@Override
	public String toString() {
		return "Product [id=" + id + ", vendor=" + vendor.getEmail() + ", Product Name=" + name +", reviews=" 
				+ reviews.size() + ", category=" + category.getCategoryType()
				+ ", images=" + images.size() + ", publishDate=" + publishDate + ", price=" + price
				+ ", productAvailable=" + productAvailable + ", ranking=" + ranking+ "]";
	}

}
